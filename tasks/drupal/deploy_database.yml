---

- name: Download project db dump
  ansible.builtin.get_url:
    url: "{{ steamengine_drupal_db_dump_url }}"
    dest: "{{ steamengine_project_root_path }}/db_dump.zip"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
    headers: "{{ steamengine_drupal_db_dump_url_headers }}"
  register: db_dump
  tags:
    - steamengine_deploy_drupal

- name: Unzip project db dump
  ansible.builtin.unarchive:
    src: "{{ steamengine_project_root_path }}/db_dump.zip"
    dest: "{{ steamengine_project_root_path }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
    remote_src: true
    list_files: true
  register: archive_contents
  tags:
    - steamengine_deploy_drupal

- name: Deploy db dump with drush
  ansible.builtin.shell: >
    {{ steamengine_drupal_drush_launcher_path }} -r {{ steamengine_project_root_path_web }} \
    sql:cli < {{ steamengine_project_root_path }}/{{ archive_contents.files[0] }}
  when: steamengine_drupal_initial_install and not steamengine_drupal_install_from_drush and steamengine_drupal_db_dump_url is defined and steamengine_drupal_db_dump_url
  tags:
    - steamengine_deploy_drupal

- name: Delete db dump
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/{{ archive_contents.files[0] }}"
    state: absent
  tags:
    - steamengine_deploy_drupal

- name: Delete archive db dump
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/db_dump.zip"
    state: absent
  tags:
    - steamengine_deploy_drupal
