---

- name: Create configuration file
  ansible.builtin.template:
    src: "project_properties.conf.j2"
    dest: "{{ steamengine_conf_path }}/project_env.conf"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rw,g=r,o=
  when: steamengine_project_configuration is defined
  notify:
    - "{{ steamengine_project_name }} restart"
  tags:
    - steamengine_deploy_tomcat

- name: Create external configuration file
  ansible.builtin.template:
    src: "{{ steamengine_project_configuration_template_path }}"
    dest: "{{ steamengine_conf_path }}/project_env.conf"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rw,g=r,o=
  when: steamengine_project_configuration_template_path is defined
  notify:
    - "{{ steamengine_project_name }} restart"
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat directory
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
    state: directory
  tags:
    - steamengine_deploy_tomcat

- name: Download tomcat
  ansible.builtin.get_url:
    url: "{{ steamengine_tomcat_tomcat_url }}"
    dest: "{{ steamengine_project_root_path }}/tomcat_{{ steamengine_tomcat_version }}.tar.gz"
    checksum: "sha512:{{ steamengine_tomcat_archive_sha512 }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
  register: get_url_tomcat
  notify:
    - "{{ steamengine_project_name }} restart"
  tags:
    - steamengine_deploy_tomcat

- name: "Is there a new tomcat version: {{ get_url_tomcat.changed }}"
  ansible.builtin.set_fact:
    new_tomcat_version: "{{ get_url_tomcat.changed }}"
  tags:
    - steamengine_deploy_tomcat

- name: Unzip tomcat
  ansible.builtin.unarchive:
    src: "{{ steamengine_project_root_path }}/tomcat_{{ steamengine_tomcat_version }}.tar.gz"
    dest: "{{ steamengine_project_root_path }}/tomcat"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
    remote_src: true
    extra_opts: [--strip-components=1]
  when: new_tomcat_version
  tags:
    - steamengine_deploy_tomcat

- name: Remove default tomcat deployment
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/webapps"
    state: absent
  when: new_tomcat_version
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat webapps directory
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/webapps"
    state: directory
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
  when: new_tomcat_version
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat working directory
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/work"
    state: directory
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rwx,o=
  when: new_tomcat_version
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat temp directory
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/temp"
    state: directory
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rwx,o=
  when: new_tomcat_version
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat configuration file
  ansible.builtin.template:
    src: "tomcat.server.xml.j2"
    dest: "{{ steamengine_project_root_path }}/tomcat/conf/server.xml"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
  notify:
    - "{{ steamengine_project_name }} restart"
  tags:
    - steamengine_deploy_tomcat

- name: "Download build {{ steamengine_build_url }}"
  ansible.builtin.get_url:
    url: "{{ steamengine_build_url }}"
    dest: "{{ steamengine_project_root_path }}/project.war"
    checksum: "{{ checksum_verified }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
    headers: "{{ steamengine_build_url_headers }}"
    validate_certs: "{{ steamengine_build_url_validate_certs }}"
  register: get_url_build
  notify:
    - "{{ steamengine_project_name }} fixpermissions"
    - "{{ steamengine_project_name }} restart"
  tags:
    - steamengine_deploy_tomcat

- name: "Is there a new build: {{ get_url_build.changed }}"
  ansible.builtin.set_fact:
    new_build_to_deploy: "{{ get_url_build.changed }}"
  tags:
    - steamengine_deploy_tomcat

- include_tasks:
    file: common/pre_deploy.yml
    apply:
      tags:
        - steamengine_deploy_tomcat
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat

- name: Fix permissions before updating source
  ansible.builtin.command: "/{{ steamengine_project_name }}/bin/steamengine fixpermissions"
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat

- name: Remove tomcat ROOT deployment
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/webapps/ROOT"
    state: absent
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat

- name: Create tomcat ROOT deployment
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path }}/tomcat/webapps/ROOT"
    state: directory
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_project_user }}"
    mode: u=rwx,g=rx,o=
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat

- name: Extract war in tomcat ROOT directory
  ansible.builtin.unarchive:
    src: "{{ steamengine_project_root_path }}/project.war"
    dest: "{{ steamengine_project_root_path }}/tomcat/webapps/ROOT"
    remote_src: true
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat

- name: Fix permissions after updating source
  ansible.builtin.command: "/{{ steamengine_project_name }}/bin/steamengine fixpermissions"
  when: new_build_to_deploy
  tags:
    - steamengine_deploy_tomcat
